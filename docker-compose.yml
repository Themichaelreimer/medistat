version: '3.8'
services:
  # Django application served by apache
  backend:
    hostname: ${PROJECT_NAME}_backend
    image: backend
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost/diseases/"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s
    environment:
      - PROJECT_NAME=${PROJECT_NAME}
      - POSTGRES_HOSTNAME=${POSTGRES_HOSTNAME}
      - POSTGRES_USERNAME=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DATABASE_NAME=${DATABASE_NAME}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    labels:
      - traefik.enable=true
      - traefik.http.routers.backend_${PROJECT_NAME}.rule=Host(`backend-${PROJECT_NAME}.${HOST}`)
      - traefik.http.routers.backend_${PROJECT_NAME}.entrypoints=web,secure
      - traefik.http.routers.backend_${PROJECT_NAME}.tls=${SSL}
      - traefik.http.routers.backend_${PROJECT_NAME}.tls.certresolver=myresolver
      - traefik.http.services.backend_${PROJECT_NAME}.loadbalancer.server.port=80

  frontend:
    hostname: ${PROJECT_NAME}_frontend
    image: frontend
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost/"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s
    labels:
      - traefik.enable=true
      - traefik.http.routers.frontend_${PROJECT_NAME}.rule=Host(`${FRONTEND_HOST}`)
      - traefik.http.routers.frontend_${PROJECT_NAME}.entrypoints=web,secure
      - traefik.http.routers.frontend_${PROJECT_NAME}.tls=${SSL}
      - traefik.http.routers.frontend_${PROJECT_NAME}.tls.certresolver=myresolver
      - traefik.http.services.frontend_${PROJECT_NAME}.loadbalancer.server.port=80

  postgres:
    hostname: db.${HOST}
    image: postgres:14.6
    restart: always  # If the container restarts endlessly and you can't figure out why, change this to 'never'
    environment:
      POSTGRES_USER: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    volumes:
      - db:/var/lib/postgresql/data
    networks:
      - backend
    labels:
      - traefik.enable=true
      - traefik.tcp.routers.db_${PROJECT_NAME}.rule=HostSNI(`*`)
      - traefik.tcp.routers.db_${PROJECT_NAME}.entrypoints=db_entrypoint
      - traefik.tcp.services.db_${PROJECT_NAME}.loadbalancer.server.port=5432
      - traefik.tcp.routers.db_${PROJECT_NAME}.service=db_${PROJECT_NAME}

  statsd:
    image: graphiteapp/graphite-statsd
    volumes:
    - .conf:/opt/graphite/storage
    - .conf:/opt/graphite/conf
    user: "1000:1000"
    networks:
      - backend
    labels:
      - traefik.enable=false

  grafana:
    image: grafana/grafana
    volumes:
    - grafana-data:/var/lib/grafana
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "/dev/null", "http://localhost:3000/login/"]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 30s
    networks:
      - backend
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    labels:
      - traefik.enable=true
      - traefik.http.routers.grafana_${PROJECT_NAME}.rule=Host(`grafana-${PROJECT_NAME}.${HOST}`)
      - traefik.http.routers.grafana_${PROJECT_NAME}.entrypoints=web,secure
      - traefik.http.routers.grafana_${PROJECT_NAME}.tls=${SSL}
      - traefik.http.routers.grafana_${PROJECT_NAME}.tls.certresolver=myresolver
      - traefik.http.services.grafana_${PROJECT_NAME}.loadbalancer.server.port=3000

  redis:
    hostname: cache.${HOST}
    image: redis:latest
    command: >
      --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    networks:
      - backend
    labels:
      - traefik.enable=true
      - traefik.tcp.routers.cache_${PROJECT_NAME}.rule=HostSNI(`*`)
      - traefik.tcp.routers.cache_${PROJECT_NAME}.entrypoints=cache_entrypoint
      - traefik.tcp.services.cache_${PROJECT_NAME}.loadbalancer.server.port=6379
      - traefik.tcp.routers.cache_${PROJECT_NAME}.service=cache_${PROJECT_NAME}

networks:
  backend:
    driver: bridge

volumes:
  db:
    driver: local

  grafana-data:
    driver: local

  redis-data:
    driver: local
